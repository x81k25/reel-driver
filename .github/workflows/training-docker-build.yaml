name: Training Docker Build

on:
  push:
    branches: [ dev, stg, main ]
  pull_request:
    branches: [ dev, stg, main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  training-docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      run: |
        # Generate tags based on branch/PR
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          TAGS="${{ env.IMAGE_PREFIX }}/training-base:pr-${{ github.event.number }}"
          echo "BASE_TAG=pr-${{ github.event.number }}" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          TAGS="${{ env.IMAGE_PREFIX }}/training-base:latest,${{ env.IMAGE_PREFIX }}/training-base:main,${{ env.IMAGE_PREFIX }}/training-base:sha-${GITHUB_SHA:0:8}"
          echo "BASE_TAG=latest" >> $GITHUB_ENV
        else
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          TAGS="${{ env.IMAGE_PREFIX }}/training-base:${BRANCH_NAME},${{ env.IMAGE_PREFIX }}/training-base:sha-${GITHUB_SHA:0:8}"
          echo "BASE_TAG=${BRANCH_NAME}" >> $GITHUB_ENV
        fi
        echo "TAGS=$TAGS" >> $GITHUB_ENV
        echo "Tags: $TAGS"

    - name: Build and push base training image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./containerization/dockerfile.base_training
        push: true
        tags: ${{ env.TAGS }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push training service images
      run: |
        set -e
        echo "Building training service images with base image: ${{ env.IMAGE_PREFIX }}/training-base:${{ env.BASE_TAG }}"
        
        # List of training services to build
        services=(
          "feature_engineering:reel-driver-feature-engineering"
          "model_training:reel-driver-model-training"
        )
        
        # Build each service
        for service_info in "${services[@]}"; do
          IFS=':' read -r dockerfile service_name <<< "$service_info"
          
          echo "Building ${service_name}..."
          
          # Generate service tags
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            SERVICE_TAGS="${{ env.IMAGE_PREFIX }}/${service_name}:pr-${{ github.event.number }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            SERVICE_TAGS="${{ env.IMAGE_PREFIX }}/${service_name}:latest,${{ env.IMAGE_PREFIX }}/${service_name}:main,${{ env.IMAGE_PREFIX }}/${service_name}:sha-${GITHUB_SHA:0:8}"
          else
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            SERVICE_TAGS="${{ env.IMAGE_PREFIX }}/${service_name}:${BRANCH_NAME},${{ env.IMAGE_PREFIX }}/${service_name}:sha-${GITHUB_SHA:0:8}"
          fi
          
          # Build and push the service image
          docker buildx build \
            --build-arg BASE_IMAGE=${{ env.IMAGE_PREFIX }}/training-base:${{ env.BASE_TAG }} \
            --file ./containerization/dockerfile.${dockerfile} \
            --tag ${SERVICE_TAGS//,/ --tag } \
            --push \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            .
        done

    - name: Report build summary
      if: always()
      run: |
        echo "## Training Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Base image: ${{ env.IMAGE_PREFIX }}/training-base:${{ env.BASE_TAG }}" >> $GITHUB_STEP_SUMMARY
        echo "- Total build time: $((SECONDS / 60)) minutes $((SECONDS % 60)) seconds" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Training images pushed:" >> $GITHUB_STEP_SUMMARY
        echo "- training-base" >> $GITHUB_STEP_SUMMARY
        echo "- reel-driver-feature-engineering" >> $GITHUB_STEP_SUMMARY
        echo "- reel-driver-model-training" >> $GITHUB_STEP_SUMMARY