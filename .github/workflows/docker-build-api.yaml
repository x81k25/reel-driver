name: Build and Push API Docker Image

on:
  push:
    branches: [ main, dev, stg ]
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stg
          - prod

env:
  REGISTRY: ghcr.io
  # Image name with api suffix
  IMAGE_NAME: ${{ github.repository }}-api

jobs:
  build-api:
    name: Build API Docker Image
    runs-on: ubuntu-latest

    # Determine environment dynamically
    environment:
      ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 
          github.ref_name == 'main' && 'prod' || 
          github.ref_name == 'stg' && 'stg' || 
          'dev' }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Set environment name for use in tags
      - name: Set environment name
        id: env_name
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "ENV_NAME=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" = "main" ]; then
            echo "ENV_NAME=prod" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" = "stg" ]; then
            echo "ENV_NAME=stg" >> $GITHUB_ENV
          else
            echo "ENV_NAME=dev" >> $GITHUB_ENV
          fi
          echo "Using environment: ${{ env.ENV_NAME }}"

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containerization/dockerfile.api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.ENV_NAME }}
            ${{ env.ENV_NAME == 'prod' && format('{0}/{1}:latest', env.REGISTRY, env.IMAGE_NAME) || '' }}
          build-args: |
            ENVIRONMENT=${{ env.ENV_NAME }}
            MODEL_PATH=${{ vars.MODEL_PATH }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            API_HOST=${{ vars.API_HOST }}
            API_PORT=${{ vars.API_PORT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max